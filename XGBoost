import numpy as np

class TreeNode:
    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):
        self.feature = feature
        self.threshold = threshold
        self.left = left
        self.right = right
        self.value = value

class XGBoost:
    def __init__(self, n_estimators=100, learning_rate=0.1, max_depth=3, min_samples_split=2, min_impurity_decrease=1e-7):
        self.n_estimators = n_estimators
        self.learning_rate = learning_rate
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.min_impurity_decrease = min_impurity_decrease
        self.trees = []

    def fit(self, X, y):
        m, n = X.shape
        self.y_mean = np.mean(y)
        y_pred = np.full(y.shape, self.y_mean)

        for _ in range(self.n_estimators):
            residuals = y - y_pred
            tree = self._build_tree(X, residuals)
            self.trees.append(tree)
            y_pred += self.learning_rate * self._predict_tree(tree, X)

    def _build_tree(self, X, y, depth=0):
        m, n = X.shape
        if depth >= self.max_depth or m < self.min_samples_split:
            return TreeNode(value=np.mean(y))

        best_feature, best_threshold, best_impurity = None, None, float('inf')
        for feature in range(n):
            thresholds = np.unique(X[:, feature])
            for threshold in thresholds:
                left_mask = X[:, feature] < threshold
                right_mask = ~left_mask
                if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:
                    continue

                left_impurity = np.var(y[left_mask])
                right_impurity = np.var(y[right_mask])
                impurity = (np.sum(left_mask) * left_impurity + np.sum(right_mask) * right_impurity) / m

                if impurity < best_impurity:
                    best_feature, best_threshold, best_impurity = feature, threshold, impurity

        if best_impurity > self.min_impurity_decrease:
            return TreeNode(value=np.mean(y))

        left_mask = X[:, best_feature] < best_threshold
        right_mask = ~left_mask
        left_child = self._build_tree(X[left_mask], y[left_mask], depth + 1)
        right_child = self._build_tree(X[right_mask], y[right_mask], depth + 1)
        return TreeNode(feature=best_feature, threshold=best_threshold, left=left_child, right=right_child)

    def _predict_tree(self, tree, X):
        if tree.value is not None:
            return np.full(X.shape[0], tree.value)

        left_mask = X[:, tree.feature] < tree.threshold
        right_mask = ~left_mask
        y_pred = np.empty(X.shape[0])
        y_pred[left_mask] = self._predict_tree(tree.left, X[left_mask])
        y_pred[right_mask] = self._predict_tree(tree.right, X[right_mask])
        return y_pred

    def predict(self, X):
        y_pred = np.full(X.shape[0], self.y_mean)
        for tree in self.trees:
            y_pred += self.learning_rate * self._predict_tree(tree, X)
        return y_pred